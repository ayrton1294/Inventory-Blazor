@using Entities
@using Business

<div class="form-group">
    <select class="form-control" @onchange="OnChangedWarehouse">
        <option value="">Seleccione una bodega</option>
        @foreach (var warehouse in warehouses)
        {
            <option value="@warehouse.WareHouseId">@warehouse.WareHouseName</option>
        }
    </select>
</div>

<hr />

<EditForm Model="oInOutPut">
    <div class="form-group">
        <InputSelect class="form-control" @bind-Value="oInOutPut.StorageId">
            <option value="">Seleccione una producto</option>
            @foreach (var storage in storages)
            {
                <option value="@storage.StorageId">@storage.Product.ProductName</option>
            }
        </InputSelect>
    </div>
    <div class="form-group">
        <label>Escriba la Cantidad</label>
        <InputNumber class="form-control" @bind-Value="oInOutPut.Quantity"></InputNumber>
    </div>
    <div class="form-group">
        <label>@question</label>
        <InputCheckbox class="form-control" @bind-Value="oInOutPut.IsInput"></InputCheckbox>
    </div>
    <input class="form-control" type="button" value="@buttonValue" @onclick="SaveInOut" />
</EditForm>

<div class="text-center h4">
    @message
</div>

@code {
    InputOutputEnitity oInOutPut = new InputOutputEnitity();
    List<WareHouseEntity> warehouses = new List<WareHouseEntity>();
    List<StorageEntity> storages = new List<StorageEntity>();

    ProductEntity oProduct = new ProductEntity();
    StorageEntity oStorage = new StorageEntity();

    string question { get => oInOutPut.IsInput ? "¿Es una Entrada?" : "¿Es una Salida?"; }
    string buttonValue => oInOutPut.IsInput ? "Registrar Entrada" : "Registrar Salida";

    string message;

    protected override async Task OnInitializedAsync()
    {
        warehouses = B_WareHouse.WareHouseList();
    }

    private void OnChangedWarehouse(ChangeEventArgs e)
    {
        var idWarehouse = e.Value.ToString();
        storages = B_Storage.StorageProductByWarehouse(idWarehouse);
    }

    private void SaveInOut()
    {
        oStorage = storages.LastOrDefault(x => x.StorageId == oInOutPut.StorageId);
        oProduct = oStorage.Product;

        if (oInOutPut.IsInput)
        {
            oStorage.PartialQuantity = oStorage.PartialQuantity + oInOutPut.Quantity;
            B_Storage.UpdateStorage(oStorage);

            oProduct.TotalQuantity = oProduct.TotalQuantity + oInOutPut.Quantity;
            B_Product.Updateroduct(oProduct);

            message = $"El producto {oProduct.ProductName} ha sido actualizado";
        }
        else
        {
            if (IsBiggerThanZero(oInOutPut.Quantity, oStorage.PartialQuantity))
            {
                oStorage.PartialQuantity = oStorage.PartialQuantity - oInOutPut.Quantity;
                B_Storage.UpdateStorage(oStorage);

                oProduct.TotalQuantity = oProduct.TotalQuantity - oInOutPut.Quantity;
                B_Product.Updateroduct(oProduct);

                message = $"El producto {oProduct.ProductName} ha sido actualizado";
            }
            else
            {
                message = $"No existe la cantidad suficiente en bodega para el producto {oProduct.ProductName}, la cantidad actual es {oStorage.PartialQuantity}";
            }
        }
    }

    private bool IsBiggerThanZero(int quantity, int storageQuantiy)
    {
        if (storageQuantiy >= quantity)
        {
            return true;
        }
        return false;
    }
}
